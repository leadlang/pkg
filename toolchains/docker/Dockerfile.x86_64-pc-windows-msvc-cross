FROM ubuntu:20.04
ARG DEBIAN_FRONTEND=noninteractive

COPY common.sh lib.sh /
RUN /common.sh

COPY cmake.sh /
RUN /cmake.sh

COPY xargo.sh /
RUN /xargo.sh

# run these in separate steps, so we can cache MSVC between all images.
COPY cross-toolchains/docker/msvc-wine.sh /
RUN /msvc-wine.sh

COPY wine.sh /
RUN /wine.sh

# need windows-style perl for paths
COPY cross-toolchains/docker/perl.sh /
RUN /perl.sh

ARG ARCH=x64
COPY cross-toolchains/docker/msvc-wine-symlink.sh /
RUN /msvc-wine-symlink.sh $ARCH

# run-detectors are responsible for calling the correct interpreter for exe
# files. For some reason it does not work inside a docker container (it works
# fine in the host). So we replace the usual paths of run-detectors to run wine
# directly. This only affects the guest, we are not messing up with the host.
#
# See /usr/share/doc/binfmt-support/detectors
RUN mkdir -p /usr/lib/binfmt-support/ && \
    rm -f /usr/lib/binfmt-support/run-detectors /usr/bin/run-detectors && \
    ln -s /usr/bin/wine /usr/lib/binfmt-support/run-detectors && \
    ln -s /usr/bin/wine /usr/bin/run-detectors

COPY cross-toolchains/docker/msvc-windows-entry.sh /
ENTRYPOINT ["/msvc-windows-entry.sh"]

ENV CROSS_SYSROOT=/opt/msvc/vc/tools/msvc/latest
ENV CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_LINKER=link.exe \
    CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUNNER=wine \
    CC_x86_64_pc_windows_msvc=cl.exe \
    CXX_x86_64_pc_windows_msvc=cl.exe \
    PATH=/opt/msvc/bin/$ARCH:$PATH \
    WINEPATH="$WINEPATH;C:/windows/syswow64;C:/windows/system32;/opt/msvc/bin/$ARCH" \
    VSINSTALLDIR="/opt/msvc" \
    VCINSTALLDIR="/opt/msvc/vc" \
    VSCMD_ARG_TGT_ARCH=$ARCH
