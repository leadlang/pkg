name: Build Outputs

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions: write-all

jobs:
  tag:
    name: Get Tag + Release
    runs-on: ubuntu-24.04
    outputs:
      tag: ${{ steps.ver.outputs.TAG_NAME }}
      upload: ${{ steps.release.outputs.upload_url }}
      id: ${{ steps.release.outputs.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4

      - name: Get Tag
        run: |
          node ver.js
          chmod 777 ./publish
          ./publish
        env:
          NIGHTLY: ${{ github.event_name == 'push' }}
        id: ver

      - name: Create Release
        uses: shogo82148/actions-create-release@v1
        id: release
        with:
          tag_name: ${{ steps.ver.outputs.TAG_NAME }}
          prerelease: ${{ github.event_name == 'push' }}
          draft: true

  publish:
    name: Publish

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            runner: windows-latest

          - target: i686-pc-windows-msvc
            runner: windows-latest

          - target: aarch64-pc-windows-msvc-cross
            runner: ubuntu-latest

          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-24.04

          - target: i686-unknown-linux-gnu
            runner: ubuntu-24.04

          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-24.04

          - target: armv7-unknown-linux-gnueabi
            runner: ubuntu-24.04

          - target: x86_64-apple-darwin
            runner: macos-latest

          - target: aarch64-apple-darwin
            runner: macos-latest

          - target: x86_64-unknown-freebsd
            runner: ubuntu-24.04

          - target: aarch64-unknown-freebsd
            runner: ubuntu-24.04

          - target: i686-unknown-freebsd
            runner: ubuntu-24.04

          - target: x86_64-unknown-netbsd
            runner: ubuntu-24.04

    runs-on: ${{ matrix.runner }}

    needs: tag
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: runner.os == 'Linux'
        uses: docker/setup-buildx-action@v3

      - name: Get Version
        run: |
          git clone https://github.com/cross-rs/cross

          cd cross
          git submodule update --init --remote
          cd ..

          node ver.js
        env:
          NIGHTLY: ${{ github.event_name == 'push' }}
          VERSION: ${{ needs.tag.outputs.tag }}

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: rust-src

      - name: Install Deps
        if: runner.os == 'Linux'
        run: |
          sudo apt update

          sudo apt install gcc-aarch64-linux-gnu clang lld

          sudo apt install zip

      - name: Build for target
        shell: pwsh
        run: |
          $env:RUSTFLAGS = ""
          $RUSTFLAGS = ""
          cargo install cross --path cross

          if ($env:BUILD_TARGET.Contains("-cross")) {
            cd cross
            cargo build-docker-image ${{ matrix.target }} --tag local
            cd ..
          }

          ./setup
          ./build
        env:
          BUILD_TARGET: ${{ matrix.target }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.target }}.zip

  build_leadpkg:
    name: Build Leadpkg

    runs-on: ubuntu-24.04

    needs: publish

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Build package
        shell: pwsh
        run: |
          ./setup
          ./finalize
