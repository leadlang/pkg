name: Build Outputs

on:
  push:
    branches:
      - main
  workflow_run:

permissions: write-all

jobs:
  tag:
    name: Get Tag + Release
    runs-on: ubuntu-24.04
    outputs:
      tag: ${{ steps.ver.outputs.TAG_NAME }}
      upload: ${{ steps.release.outputs.upload_url }}
      id: ${{ steps.release.outputs.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4

      - name: Get Tag
        run: |
          node ver.js
          chmod 777 ./publish
          ./publish
        env:
          NIGHTLY: ${{ github.event_name == 'push' }}
        id: ver

      - name: Create Release
        uses: shogo82148/actions-create-release@v1
        id: release
        with:
          tag_name: ${{ steps.ver.outputs.TAG_NAME }}
          prerelease: ${{ github.event_name == 'push' }}
          draft: true

  publish:
    name: Publish

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            runner: windows-latest

          - target: i686-pc-windows-msvc
            runner: windows-latest

          - target: aarch64-pc-windows-msvc
            runner: windows-latest

          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-24.04

          - target: x86_64-apple-darwin
            runner: macos-latest

          - target: aarch64-apple-darwin
            runner: macos-latest

    runs-on: ${{ matrix.runner }}

    needs: tag
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4

      - name: Get Version
        run: |
          node ver.js
        env:
          NIGHTLY: ${{ github.event_name == 'push' }}
          LEAD_VER: ${{ needs.tag.outputs.tag }}

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          target: ${{ matrix.target }}
          components: rust-src

      - name: Install Deps
        if: runner.os == 'Linux'
        run: |
          sudo apt update

          sudo apt install gcc-aarch64-linux-gnu clang lld

          sudo apt install zip

      - name: Build for target
        shell: pwsh
        run: |
          ./setup
          ./build
        env:
          BUILD_TARGET: ${{ matrix.target }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.target }}.zip
